"""
一.函数作用:
    1.作为一种设计工具，将复杂的系统分解为可管理的部件(流程分解)
    2.实现代码最大程度的重用和最小化代码冗余而提供的最基本的程序结构
        将一些语句集合在一起的部件，能够在程序中不止一次的调用
        代替剪切操作减少冗余副本并且当代码需要修改时，只需要修改其中的一份拷贝
    3.能够计算出返回值
    4.传递不同的实参来适应多种情形下的操作，使其成为一个能够广泛应用的工具
二.函数的基本概念、作用域、参数传递、相关概念(生成器、函数式工具、多态)
    1.def语句是可执行的代码
        当Python运行def语句以后才生成函数对象。
        写在模块中的代码在导入时会运行，写在模块中的函数定义也会执行并生成函数对象
    2.def语句运行后创建一个函数对象将其赋值给函数名
        和其他赋值相同，函数名是函数对象的一个引用，因此也可以将函数对象赋值给其他变量名

                                          # 执行def语句时 生成函数对象，并将此对象赋值给函数名
        def <name>(arg1, arg2...argN):    # 包含0个以上的形参，函数调用时形参名赋值给传递过来的实参对象？？？
            <statements>                  # 缩进的代码块是每次函数调用时执行的语句
        def <name>(arg1, arg2...argN):
            <...>
            return <value>                # 是可选项，如果存在代表函数调用结束，并将结果对象返回到函数调用处
                                                    如果不存在，函数在函数主体执行完成时结束，默认返回None对象
    3.def语句是实时执行的
        Python中所有语句都是实时执行的，没有独立的编译时间。
        Python中的函数在程序运行之前不需要全部定义，更确切的讲，def语句在运行时才进行评估，而def语句之中的代码会在函数调用后才会评估
        函数名和变量名相同，仅仅是对象的引用。因此函数名可以进行赋值
    4.函数允许任意的属性附加到记录信息以供后续使用
    5.多态
        一个操作的具体意义取决于被操作对象的类型。
        它可以自动地适用于所有类别的对象类型，只要该对象支持所预期的接口，那么就能够进行处理。
        (如果传递过来的对象有预期的方法和表达式操作符，那么它们对于函数的逻辑有着即插即用的兼容性)
        如果传递的对象不支持这种预期的借口，Python将会在运行时检测到错误并自动抛出异常
    6.本地变量
        所有在函数内部赋值的变量名默认为本地变量，所有本地变量在函数调用时产生在函数退出时小时
"""

# 函数定义: 当Python执行def语句时会创建一个函数对象来封装这个函数的代码，并赋值给函数名
def times(x, y):
    return x * y

# 函数调用: 在def语句运行之后，程序可以使用 函数名()来调用函数。函数调用时，先完成形参初始化(将实参的值赋值给形参)，然后运行函数主体
print(times(2, 4))

# 函数的多态: 只要该对象支持函数中形参的操作便可以最为实参传递过来。有预期的接口(方法、表达式操作符)
print(times('Ni', 3))

# 序列交集: 只要第一个参数支持for循环；第二个参数支持成员检测，就可传递给这个函数并正常工作
def intersect(seq1, seq2):
    res = []
    for x in seq1:
        if x in seq2:
            res.append(x)
    return res

s1 = "SPAM"
s2 = "SCAM"
print(intersect(s1, s2))

# 函数名之间的赋值
def add(x, y):
    return x + y

print(add(1, 2))

sum = add
print(sum(1, 2))

# 为函数添加属性并使用
sum.attr = "附加属性"
print(sum(1,2))
print(sum.attr)
print(sum)